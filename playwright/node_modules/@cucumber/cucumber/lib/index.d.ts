/**
 * User code functions and helpers
 *
 * @packageDocumentation
 * @module (root)
 * @remarks
 * These docs cover the functions and helpers for user code registration and test setup. The entry point is `@cucumber/cucumber`.
 */
import * as messages from '@cucumber/messages';
import { default as _Cli } from '@cucumber/cucumber/lib/cli';
import * as formatterHelpers from '@cucumber/cucumber/lib/formatter/helpers';
import * as parallelCanAssignHelpers from '@cucumber/cucumber/lib/support_code_library_builder/parallel_can_assign_helpers';
export declare const version: string;
export { default as supportCodeLibraryBuilder } from '@cucumber/cucumber/lib/support_code_library_builder';
export { default as DataTable } from '@cucumber/cucumber/lib/models/data_table';
export { default as TestCaseHookDefinition } from '@cucumber/cucumber/lib/models/test_case_hook_definition';
export { default as Formatter, IFormatterOptions } from '@cucumber/cucumber/lib/formatter';
export { default as FormatterBuilder } from '@cucumber/cucumber/lib/formatter/builder';
export { default as JsonFormatter } from '@cucumber/cucumber/lib/formatter/json_formatter';
export { default as ProgressFormatter } from '@cucumber/cucumber/lib/formatter/progress_formatter';
export { default as RerunFormatter } from '@cucumber/cucumber/lib/formatter/rerun_formatter';
export { default as SnippetsFormatter } from '@cucumber/cucumber/lib/formatter/snippets_formatter';
export { default as SummaryFormatter } from '@cucumber/cucumber/lib/formatter/summary_formatter';
export { default as UsageFormatter } from '@cucumber/cucumber/lib/formatter/usage_formatter';
export { default as UsageJsonFormatter } from '@cucumber/cucumber/lib/formatter/usage_json_formatter';
export { formatterHelpers };
export declare const After: (<WorldType = import("@cucumber/cucumber/lib/support_code_library_builder/world").IWorld<any>>(code: import("@cucumber/cucumber/lib/support_code_library_builder/types").TestCaseHookFunction<WorldType>) => void) & (<WorldType = import("@cucumber/cucumber/lib/support_code_library_builder/world").IWorld<any>>(tags: string, code: import("@cucumber/cucumber/lib/support_code_library_builder/types").TestCaseHookFunction<WorldType>) => void) & (<WorldType = import("@cucumber/cucumber/lib/support_code_library_builder/world").IWorld<any>>(options: import("@cucumber/cucumber/lib/support_code_library_builder/types").IDefineTestCaseHookOptions, code: import("@cucumber/cucumber/lib/support_code_library_builder/types").TestCaseHookFunction<WorldType>) => void);
export declare const AfterAll: ((code: import("@cucumber/cucumber/lib/support_code_library_builder/types").TestRunHookFunction) => void) & ((options: import("@cucumber/cucumber/lib/support_code_library_builder/types").IDefineTestRunHookOptions, code: import("@cucumber/cucumber/lib/support_code_library_builder/types").TestRunHookFunction) => void);
export declare const AfterStep: (<WorldType = import("@cucumber/cucumber/lib/support_code_library_builder/world").IWorld<any>>(code: import("@cucumber/cucumber/lib/support_code_library_builder/types").TestStepHookFunction<WorldType>) => void) & (<WorldType = import("@cucumber/cucumber/lib/support_code_library_builder/world").IWorld<any>>(tags: string, code: import("@cucumber/cucumber/lib/support_code_library_builder/types").TestStepHookFunction<WorldType>) => void) & (<WorldType = import("@cucumber/cucumber/lib/support_code_library_builder/world").IWorld<any>>(options: import("@cucumber/cucumber/lib/support_code_library_builder/types").IDefineTestStepHookOptions, code: import("@cucumber/cucumber/lib/support_code_library_builder/types").TestStepHookFunction<WorldType>) => void);
export declare const Before: (<WorldType = import("@cucumber/cucumber/lib/support_code_library_builder/world").IWorld<any>>(code: import("@cucumber/cucumber/lib/support_code_library_builder/types").TestCaseHookFunction<WorldType>) => void) & (<WorldType = import("@cucumber/cucumber/lib/support_code_library_builder/world").IWorld<any>>(tags: string, code: import("@cucumber/cucumber/lib/support_code_library_builder/types").TestCaseHookFunction<WorldType>) => void) & (<WorldType = import("@cucumber/cucumber/lib/support_code_library_builder/world").IWorld<any>>(options: import("@cucumber/cucumber/lib/support_code_library_builder/types").IDefineTestCaseHookOptions, code: import("@cucumber/cucumber/lib/support_code_library_builder/types").TestCaseHookFunction<WorldType>) => void);
export declare const BeforeAll: ((code: import("@cucumber/cucumber/lib/support_code_library_builder/types").TestRunHookFunction) => void) & ((options: import("@cucumber/cucumber/lib/support_code_library_builder/types").IDefineTestRunHookOptions, code: import("@cucumber/cucumber/lib/support_code_library_builder/types").TestRunHookFunction) => void);
export declare const BeforeStep: (<WorldType = import("@cucumber/cucumber/lib/support_code_library_builder/world").IWorld<any>>(code: import("@cucumber/cucumber/lib/support_code_library_builder/types").TestStepHookFunction<WorldType>) => void) & (<WorldType = import("@cucumber/cucumber/lib/support_code_library_builder/world").IWorld<any>>(tags: string, code: import("@cucumber/cucumber/lib/support_code_library_builder/types").TestStepHookFunction<WorldType>) => void) & (<WorldType = import("@cucumber/cucumber/lib/support_code_library_builder/world").IWorld<any>>(options: import("@cucumber/cucumber/lib/support_code_library_builder/types").IDefineTestStepHookOptions, code: import("@cucumber/cucumber/lib/support_code_library_builder/types").TestStepHookFunction<WorldType>) => void);
export declare const defineStep: import("@cucumber/cucumber/lib/support_code_library_builder/types").IDefineStep;
export declare const defineParameterType: (options: import("@cucumber/cucumber/lib/support_code_library_builder/types").IParameterTypeDefinition<any>) => void;
export declare const Given: import("@cucumber/cucumber/lib/support_code_library_builder/types").IDefineStep;
export declare const setDefaultTimeout: (milliseconds: number) => void;
export declare const setDefinitionFunctionWrapper: (fn: Function) => void;
export declare const setWorldConstructor: (fn: any) => void;
export declare const setParallelCanAssign: (fn: import("@cucumber/cucumber/lib/support_code_library_builder/types").ParallelAssignmentValidator) => void;
export declare const Then: import("@cucumber/cucumber/lib/support_code_library_builder/types").IDefineStep;
export declare const When: import("@cucumber/cucumber/lib/support_code_library_builder/types").IDefineStep;
export { default as World, IWorld, IWorldOptions, } from '@cucumber/cucumber/lib/support_code_library_builder/world';
export { IContext } from '@cucumber/cucumber/lib/support_code_library_builder/context';
export { worldProxy as world, contextProxy as context } from '@cucumber/cucumber/lib/runtime/scope';
export { parallelCanAssignHelpers };
export { ITestCaseHookParameter, ITestStepHookParameter, } from '@cucumber/cucumber/lib/support_code_library_builder/types';
export declare const Status: typeof messages.TestStepResultStatus;
export { wrapPromiseWithTimeout } from '@cucumber/cucumber/lib/time';
/**
 * @deprecated use `runCucumber` instead; see https://github.com/cucumber/cucumber-js/blob/main/docs/deprecations.md
 */
export declare const Cli: typeof _Cli;
